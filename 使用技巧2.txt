什么不用自带的CSS、XPath选择器？	
	--功能死板。优先根据id选择，如果没有id，会不断寻找上层id，导致有时候使用很多层，甚至还有次序选择。
	--路径越长，层级越多，代码变动的可能性就越大
	

异常捕获，确保chrome进程退出
	切换到新的窗口里面操作：

	try：
		driver.get('http://www.vmall.com')
		
		t1 = driver.find_element_by_id('b1')
		t2 = driver.find_element_by_id('t2')
		t3 = driver.find_element_by_id('t3')
	
	except:
		print traceback.format_exc()
	finally:
		driver.quit()
	--在driver生成之后进行捕获，因为如果没有生成成功，也就无法退出了。

窗口冻结
	--console: setTimeout(function(){debugger},3000)
	
--界面上看不见的元素，也不可操作。如果一定要操作，会报元素不可见异常

--如何让鼠标停留在界面上
	--通过ActionChains类
	
	代码：
	from selenium.webdriver.common.action_chains import ActionChains
	
	ac = ActionChains(driver)
	ac.move_to_element(driver.find_element_by_id()).perform()
	
	--ActionChains类的操作，返回的都是self对象，所以可以连续操作。像一个链子一样。
	acInstance.action1().action2().actionN().perform()
	
	--调用perform()，才是真正地执行动作
	--鼠标移动的位置，是所在区域对角线的中心点
	--移动到某个元素上面
		ActionChains(driver).move_to_element(ele).perform()
	
	--一个例子：
		ac = ActionChains(driver)
		
		t1 = driver.find_element_by_id('t1')
		t2 = driver.find_element_by_id('t2')
		t3 = driver.find_element_by_id('t3')
		
		ac.click(t1).send_keys('1').click(t2).send_keys('2').click(t3).send_keys('3').perform()
		
	--涉及到特殊动作时，可以使用ActionChains类

-- 界面元素在最底部，需要滑动滚动条的话，也可以直接操作，比如输入框。
	
--改变窗口大小
	--driver.set_window_size(1000,size[height])
		参数：窗口的宽度和高度（高度不变）
	--如果只想改变宽度，高度保持不变，可以获取原来的高度：		
		--size = driver.get_window_size()
		-- 返回的是一个字典，高度: , 宽度。高度键值为height，宽度键值为width。
		
	代码：	
		size = driver.get_window_size
		driver.set_window_size(1400,size['height'])
	--最大化
		driver.maximize_window()
	--最小化
		driver.minimize_window()
		
-- 前端的编程语言，就是javascript，js，和python一样。
可以动态地改变页面内容，发出网络请求。前端最重要的任务就是呈现界面，js经常做一些界面内容改变的效果。滚动界面，是js内置的一个方法。

--console：交互式地命令行
	-- window.scrollBy()方法
		--参数：横向和纵向滚动的像素
	
	例子：
		横向：200
		纵向：0
	
	横向滚动：
		window.scrollBy(200,0)
			--向右滚动200
	
	纵向滚动：
		window.scrollBy(0,500)
		window.scrollBy(0,-500)
			--向上滚动
	
	在python中的写法：
		driver.execute_script('window.scrollBy(250,0)')
		--python 程序通过浏览器驱动，把这条命令发送给浏览器，告诉浏览器，我们要执行java script代码，打码是参数里面的字符串内容。浏览器就会去执行它
		
	想运行的java script脚本，都可以通过driver.execute_script()命令，让浏览器去执行
	
	--滚到最底部
		--数字大一点，就可以滚动到最底部

java script 局部绘制，不等同于整个页面重新加载。
	--重新绘制之后，对象会重新产生，原来保存的对象已经过期
	--解决办法：重新查找，防止过期
	
	--代码：
		while True:
			delButtons = driver.find_elements_by_css_selector('button[ng-click^=delOne]')
			
			if delButtons == []:
				break
			
			delButtons[0].click()
			
			driver.find_element_by_css_selector('button.btn-primary')
			
			time.sleep()

半自动化：
	--图形界面自动化的难度：
		--模拟难
		--检查难
		
	--难自动化 的操作，都提示（beep）人去做
		import winsound
		winsound.Beep(1500, 3000)
		其余部分：自动化 去做
	
	自动化的目的：提高测试效率
